 - sts_assume_role:
    role_arn: "{{rolearn}}"
    role_session_name: "{{rolename}}"
   register: assumed_role

 - set_fact:
     new_ec2: "{{item}}"
   with_lines: cat ./fm_instance_ip_address1

 - set_fact:
     ansible_pass: "{{ lookup('aws_secret', '/privami/userpass', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"

 - debug:
     var: new_ec2

 - add_host:
     hostname: "{{new_ec2}}"
     ansible_user: Administrator
     ansible_password: "{{ansible_pass}}"
     ansible_connection: winrm
     ansible_winrm_transport: ntlm
     ansible_winrm_server_cert_validation: ignore

 - name: Install AWS CLI Tools for Powershell
   win_command: "powershell Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force; Install-Module -Name AWSPowerShell -Force; Install-Module -Name AWSPowerShell.NetCore -AllowClobber -Force"
   args:
     chdir: c:\
   delegate_to: "{{new_ec2}}"

 - name: Reset PW Settings for Scripting
   win_command: "net accounts /maxpwage:0"
   args:
     chdir: c:\
   ignore_errors: true
   delegate_to: "{{new_ec2}}"
 
 - name: Copy Files To Host
   win_copy:
     remote_src: no
     src: "{{item}}"
     dest: c:\temp\
   with_items:
     - "files/chrome_install.ps1"
     - "files/disable_windows_stuffs.ps1"
     - "files/disable_SSLv3_SSLv2_TLS1.0.reg"
     - "files/SSL_TLS.reg"
   delegate_to: "{{new_ec2}}"

 - name: Copy Template Scripts For Running
   ansible.windows.win_template:
     src: "files/{{item}}.ps1.j2"
     dest: "C:\\temp\\{{item}}.ps1"
   with_items:
     - "eagle_create"
   delegate_to: "{{new_ec2}}"

 - name: Run Powershell Scripts
   win_command: "{{item}}"
   args:
     chdir: c:\temp\
   loop:
     - "powershell c:\\temp\\eagle_create.ps1"
     - "powershell c:\\temp\\chrome_install.ps1"
     - "powershell c:\\temp\\disable_windows_stuffs.ps1"
     #- "powershell c:\\temp\\TLS-SSL.ps1"
   delegate_to: "{{new_ec2}}"

 - name: Download WinCollect From S3
   aws_s3:
     aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
     aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
     security_token: "{{ assumed_role.sts_creds.session_token }}"
     bucket: fhmc-cloudengineering
     object: "ami-creation/windows/deployment-files/Installs/WinCollect_Agent/wincollect-7.3.0-41.x64.exe"
     dest: "./wincollect-7.3.0-41.x64.exe"
     mode: get

 - name: Download Cisco AMP From S3
   aws_s3:
     aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
     aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
     security_token: "{{ assumed_role.sts_creds.session_token }}"
     bucket: fhmc-cloudengineering
     object: "ami-creation/windows/deployment-files/Installs/Cisco AMP/WindowsServers/7.3.9/_New Servers/amp_FHMC_Server_Group.exe"
     dest: "./amp_FHMC_Server_Group.exe"
     mode: get

 - name: Copy WinCollect and Cisco AMP To Host
   win_copy:
     remote_src: no
     src: "{{item}}"
     dest: c:\temp\
   with_items:
     - "./wincollect-7.3.0-41.x64.exe"
     - "./amp_FHMC_Server_Group.exe"
   delegate_to: "{{new_ec2}}"

 - name: Install Cisco AMP as Golden Image
   win_command: "{{item}}"
   args:
     chdir: c:\temp\
   loop:
     - "powershell ./amp_FHMC_Server_Group.exe /R /S /goldenimage 1"
   delegate_to: "{{new_ec2}}"

 - name: Clean Up Local Temp Files
   ansible.builtin.file:
     path: "{{item}}"
     state: absent
   with_items:
     - "./wincollect-7.3.0-41.x64.exe"
     - "./amp_FHMC_Server_Group.exe"